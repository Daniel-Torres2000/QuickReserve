{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Torres\\\\Documents\\\\GitHub\\\\QuickReserve\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { auth } from '../firebase/firebaseConfig';\n\n// Crear el contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Hook personalizado para usar el contexto\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};\n\n// Provider del contexto\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Verificar si hay una sesión activa al cargar la app\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async firebaseUser => {\n      try {\n        if (firebaseUser) {\n          // Usuario autenticado en Firebase\n          // Intentar obtener datos del localStorage/sessionStorage\n          let userData = localStorage.getItem('userData') || sessionStorage.getItem('userData');\n          if (userData) {\n            userData = JSON.parse(userData);\n            setUser(userData);\n            setIsAuthenticated(true);\n          } else {\n            // Si no hay datos guardados, obtenerlos del backend\n            const token = await firebaseUser.getIdToken();\n            // Aquí podrías hacer una llamada al backend para obtener userData\n            // Por ahora, manejamos el caso donde no hay datos\n            console.log('Usuario autenticado en Firebase pero sin datos guardados');\n          }\n        } else {\n          // Usuario no autenticado\n          setUser(null);\n          setIsAuthenticated(false);\n          // Limpiar almacenamiento\n          localStorage.removeItem('token');\n          localStorage.removeItem('userData');\n          sessionStorage.removeItem('token');\n          sessionStorage.removeItem('userData');\n        }\n      } catch (error) {\n        console.error('Error checking auth status:', error);\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setIsLoading(false);\n      }\n    });\n\n    // Cleanup subscription\n    return () => unsubscribe();\n  }, []);\n  const login = (userData, token, remember = false) => {\n    try {\n      setUser(userData);\n      setIsAuthenticated(true);\n\n      // Guardar en localStorage o sessionStorage según \"remember\"\n      if (remember) {\n        localStorage.setItem('token', token);\n        localStorage.setItem('userData', JSON.stringify(userData));\n      } else {\n        sessionStorage.setItem('token', token);\n        sessionStorage.setItem('userData', JSON.stringify(userData));\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n      throw new Error('Error al iniciar sesión');\n    }\n  };\n  const logout = async () => {\n    try {\n      // Cerrar sesión en Firebase\n      await auth.signOut();\n      setUser(null);\n      setIsAuthenticated(false);\n\n      // Limpiar almacenamiento\n      localStorage.removeItem('token');\n      localStorage.removeItem('userData');\n      sessionStorage.removeItem('token');\n      sessionStorage.removeItem('userData');\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  };\n  const updateUser = newUserData => {\n    try {\n      const updatedUser = {\n        ...user,\n        ...newUserData\n      };\n      setUser(updatedUser);\n\n      // Actualizar en el almacenamiento correspondiente\n      if (localStorage.getItem('userData')) {\n        localStorage.setItem('userData', JSON.stringify(updatedUser));\n      }\n      if (sessionStorage.getItem('userData')) {\n        sessionStorage.setItem('userData', JSON.stringify(updatedUser));\n      }\n    } catch (error) {\n      console.error('Error updating user:', error);\n    }\n  };\n\n  // Verificar si el usuario tiene un rol específico\n  const hasRole = role => {\n    return user && user.role === role;\n  };\n\n  // Verificar si el usuario tiene alguno de los roles especificados\n  const hasAnyRole = roles => {\n    return user && roles.includes(user.role);\n  };\n\n  // Obtener token actual\n  const getToken = () => {\n    return localStorage.getItem('token') || sessionStorage.getItem('token');\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    updateUser,\n    hasRole,\n    hasAnyRole,\n    getToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"v1LRzRO747hYRtRdhUIJv9BiM4M=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","onAuthStateChanged","auth","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","unsubscribe","firebaseUser","userData","localStorage","getItem","sessionStorage","JSON","parse","token","getIdToken","console","log","removeItem","error","login","remember","setItem","stringify","logout","signOut","updateUser","newUserData","updatedUser","hasRole","role","hasAnyRole","roles","includes","getToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Daniel Torres/Documents/GitHub/QuickReserve/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { onAuthStateChanged } from 'firebase/auth';\r\nimport { auth } from '../firebase/firebaseConfig';\r\n\r\n// Crear el contexto\r\nconst AuthContext = createContext();\r\n\r\n// Hook personalizado para usar el contexto\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Provider del contexto\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Verificar si hay una sesión activa al cargar la app\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\r\n      try {\r\n        if (firebaseUser) {\r\n          // Usuario autenticado en Firebase\r\n          // Intentar obtener datos del localStorage/sessionStorage\r\n          let userData = localStorage.getItem('userData') || sessionStorage.getItem('userData');\r\n          \r\n          if (userData) {\r\n            userData = JSON.parse(userData);\r\n            setUser(userData);\r\n            setIsAuthenticated(true);\r\n          } else {\r\n            // Si no hay datos guardados, obtenerlos del backend\r\n            const token = await firebaseUser.getIdToken();\r\n            // Aquí podrías hacer una llamada al backend para obtener userData\r\n            // Por ahora, manejamos el caso donde no hay datos\r\n            console.log('Usuario autenticado en Firebase pero sin datos guardados');\r\n          }\r\n        } else {\r\n          // Usuario no autenticado\r\n          setUser(null);\r\n          setIsAuthenticated(false);\r\n          // Limpiar almacenamiento\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userData');\r\n          sessionStorage.removeItem('token');\r\n          sessionStorage.removeItem('userData');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking auth status:', error);\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    });\r\n\r\n    // Cleanup subscription\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  const login = (userData, token, remember = false) => {\r\n    try {\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n      \r\n      // Guardar en localStorage o sessionStorage según \"remember\"\r\n      if (remember) {\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('userData', JSON.stringify(userData));\r\n      } else {\r\n        sessionStorage.setItem('token', token);\r\n        sessionStorage.setItem('userData', JSON.stringify(userData));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n      throw new Error('Error al iniciar sesión');\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // Cerrar sesión en Firebase\r\n      await auth.signOut();\r\n      \r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      \r\n      // Limpiar almacenamiento\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('userData');\r\n      sessionStorage.removeItem('token');\r\n      sessionStorage.removeItem('userData');\r\n    } catch (error) {\r\n      console.error('Error during logout:', error);\r\n    }\r\n  };\r\n\r\n  const updateUser = (newUserData) => {\r\n    try {\r\n      const updatedUser = { ...user, ...newUserData };\r\n      setUser(updatedUser);\r\n      \r\n      // Actualizar en el almacenamiento correspondiente\r\n      if (localStorage.getItem('userData')) {\r\n        localStorage.setItem('userData', JSON.stringify(updatedUser));\r\n      }\r\n      if (sessionStorage.getItem('userData')) {\r\n        sessionStorage.setItem('userData', JSON.stringify(updatedUser));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating user:', error);\r\n    }\r\n  };\r\n\r\n  // Verificar si el usuario tiene un rol específico\r\n  const hasRole = (role) => {\r\n    return user && user.role === role;\r\n  };\r\n\r\n  // Verificar si el usuario tiene alguno de los roles especificados\r\n  const hasAnyRole = (roles) => {\r\n    return user && roles.includes(user.role);\r\n  };\r\n\r\n  // Obtener token actual\r\n  const getToken = () => {\r\n    return localStorage.getItem('token') || sessionStorage.getItem('token');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    isLoading,\r\n    login,\r\n    logout,\r\n    updateUser,\r\n    hasRole,\r\n    hasAnyRole,\r\n    getToken\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,kBAAkB,QAAQ,eAAe;AAClD,SAASC,IAAI,QAAQ,4BAA4B;;AAEjD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMS,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGV,UAAU,CAACO,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EACrE;EACA,OAAOD,OAAO;AAChB,CAAC;;AAED;AAAAD,EAAA,CARaD,OAAO;AASpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACgB,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMmB,WAAW,GAAGlB,kBAAkB,CAACC,IAAI,EAAE,MAAOkB,YAAY,IAAK;MACnE,IAAI;QACF,IAAIA,YAAY,EAAE;UAChB;UACA;UACA,IAAIC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,UAAU,CAAC;UAErF,IAAIF,QAAQ,EAAE;YACZA,QAAQ,GAAGI,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;YAC/BP,OAAO,CAACO,QAAQ,CAAC;YACjBL,kBAAkB,CAAC,IAAI,CAAC;UAC1B,CAAC,MAAM;YACL;YACA,MAAMW,KAAK,GAAG,MAAMP,YAAY,CAACQ,UAAU,CAAC,CAAC;YAC7C;YACA;YACAC,OAAO,CAACC,GAAG,CAAC,0DAA0D,CAAC;UACzE;QACF,CAAC,MAAM;UACL;UACAhB,OAAO,CAAC,IAAI,CAAC;UACbE,kBAAkB,CAAC,KAAK,CAAC;UACzB;UACAM,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;UAChCT,YAAY,CAACS,UAAU,CAAC,UAAU,CAAC;UACnCP,cAAc,CAACO,UAAU,CAAC,OAAO,CAAC;UAClCP,cAAc,CAACO,UAAU,CAAC,UAAU,CAAC;QACvC;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDlB,OAAO,CAAC,IAAI,CAAC;QACbE,kBAAkB,CAAC,KAAK,CAAC;MAC3B,CAAC,SAAS;QACRE,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAMC,WAAW,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,KAAK,GAAGA,CAACZ,QAAQ,EAAEM,KAAK,EAAEO,QAAQ,GAAG,KAAK,KAAK;IACnD,IAAI;MACFpB,OAAO,CAACO,QAAQ,CAAC;MACjBL,kBAAkB,CAAC,IAAI,CAAC;;MAExB;MACA,IAAIkB,QAAQ,EAAE;QACZZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAER,KAAK,CAAC;QACpCL,YAAY,CAACa,OAAO,CAAC,UAAU,EAAEV,IAAI,CAACW,SAAS,CAACf,QAAQ,CAAC,CAAC;MAC5D,CAAC,MAAM;QACLG,cAAc,CAACW,OAAO,CAAC,OAAO,EAAER,KAAK,CAAC;QACtCH,cAAc,CAACW,OAAO,CAAC,UAAU,EAAEV,IAAI,CAACW,SAAS,CAACf,QAAQ,CAAC,CAAC;MAC9D;IACF,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAM,IAAIvB,KAAK,CAAC,yBAAyB,CAAC;IAC5C;EACF,CAAC;EAED,MAAM4B,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF;MACA,MAAMnC,IAAI,CAACoC,OAAO,CAAC,CAAC;MAEpBxB,OAAO,CAAC,IAAI,CAAC;MACbE,kBAAkB,CAAC,KAAK,CAAC;;MAEzB;MACAM,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;MAChCT,YAAY,CAACS,UAAU,CAAC,UAAU,CAAC;MACnCP,cAAc,CAACO,UAAU,CAAC,OAAO,CAAC;MAClCP,cAAc,CAACO,UAAU,CAAC,UAAU,CAAC;IACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAMO,UAAU,GAAIC,WAAW,IAAK;IAClC,IAAI;MACF,MAAMC,WAAW,GAAG;QAAE,GAAG5B,IAAI;QAAE,GAAG2B;MAAY,CAAC;MAC/C1B,OAAO,CAAC2B,WAAW,CAAC;;MAEpB;MACA,IAAInB,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,EAAE;QACpCD,YAAY,CAACa,OAAO,CAAC,UAAU,EAAEV,IAAI,CAACW,SAAS,CAACK,WAAW,CAAC,CAAC;MAC/D;MACA,IAAIjB,cAAc,CAACD,OAAO,CAAC,UAAU,CAAC,EAAE;QACtCC,cAAc,CAACW,OAAO,CAAC,UAAU,EAAEV,IAAI,CAACW,SAAS,CAACK,WAAW,CAAC,CAAC;MACjE;IACF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,MAAMU,OAAO,GAAIC,IAAI,IAAK;IACxB,OAAO9B,IAAI,IAAIA,IAAI,CAAC8B,IAAI,KAAKA,IAAI;EACnC,CAAC;;EAED;EACA,MAAMC,UAAU,GAAIC,KAAK,IAAK;IAC5B,OAAOhC,IAAI,IAAIgC,KAAK,CAACC,QAAQ,CAACjC,IAAI,CAAC8B,IAAI,CAAC;EAC1C,CAAC;;EAED;EACA,MAAMI,QAAQ,GAAGA,CAAA,KAAM;IACrB,OAAOzB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,OAAO,CAAC;EACzE,CAAC;EAED,MAAMyB,KAAK,GAAG;IACZnC,IAAI;IACJE,eAAe;IACfE,SAAS;IACTgB,KAAK;IACLI,MAAM;IACNE,UAAU;IACVG,OAAO;IACPE,UAAU;IACVG;EACF,CAAC;EAED,oBACE3C,OAAA,CAACC,WAAW,CAAC4C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAArC,QAAA,EAChCA;EAAQ;IAAAuC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzC,GAAA,CAtIWF,YAAY;AAAA4C,EAAA,GAAZ5C,YAAY;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}