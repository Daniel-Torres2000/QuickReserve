{"ast":null,"code":"// src/services/usersService.js\nimport { collection, doc, getDocs, addDoc, updateDoc, deleteDoc, query, orderBy, where, serverTimestamp, getDoc } from 'firebase/firestore';\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\nimport { db, auth } from '../firebase/firebaseConfig';\n\n// Colección de usuarios en Firestore\nconst USERS_COLLECTION = 'users';\n\n// Generar contraseña temporal aleatoria\nconst generateTempPassword = () => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let password = '';\n  for (let i = 0; i < 8; i++) {\n    password += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return password;\n};\n\n// CREATE - Crear nuevo usuario\nexport const createUser = async userData => {\n  try {\n    const tempPassword = generateTempPassword();\n\n    // Crear usuario en Firebase Auth\n    const userCredential = await createUserWithEmailAndPassword(auth, userData.email, tempPassword);\n    const uid = userCredential.user.uid;\n\n    // Preparar datos del usuario para Firestore\n    const userDoc = {\n      uid,\n      nombre: userData.nombre,\n      apellido: userData.apellido,\n      name: `${userData.nombre} ${userData.apellido}`,\n      // Nombre completo\n      email: userData.email,\n      telefono: userData.telefono,\n      role: userData.role,\n      isActive: true,\n      mustChangePassword: true,\n      tempPassword: tempPassword,\n      createdAt: serverTimestamp()\n    };\n\n    // Guardar en Firestore\n    const docRef = await addDoc(collection(db, USERS_COLLECTION), userDoc);\n\n    // Retornar el usuario creado con su ID\n    return {\n      id: docRef.id,\n      ...userDoc,\n      createdAt: new Date() // Para mostrar inmediatamente\n    };\n  } catch (error) {\n    console.error('Error creating user:', error);\n    throw new Error(`Error al crear usuario: ${error.message}`);\n  }\n};\n\n// READ - Obtener todos los usuarios\nexport const getAllUsers = async () => {\n  try {\n    const q = query(collection(db, USERS_COLLECTION), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const users = [];\n    querySnapshot.forEach(doc => {\n      var _doc$data$createdAt;\n      users.push({\n        id: doc.id,\n        ...doc.data(),\n        // Convertir timestamp a fecha legible\n        fechaRegistro: ((_doc$data$createdAt = doc.data().createdAt) === null || _doc$data$createdAt === void 0 ? void 0 : _doc$data$createdAt.toDate().toLocaleDateString('es-ES')) || 'N/A'\n      });\n    });\n    return users;\n  } catch (error) {\n    console.error('Error getting users:', error);\n    throw new Error(`Error al obtener usuarios: ${error.message}`);\n  }\n};\n\n// READ - Obtener usuario por ID\nexport const getUserById = async userId => {\n  try {\n    const docRef = doc(db, USERS_COLLECTION, userId);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n      return {\n        id: docSnap.id,\n        ...docSnap.data()\n      };\n    } else {\n      throw new Error('Usuario no encontrado');\n    }\n  } catch (error) {\n    console.error('Error getting user:', error);\n    throw new Error(`Error al obtener usuario: ${error.message}`);\n  }\n};\n\n// READ - Filtrar usuarios por rol\nexport const getUsersByRole = async role => {\n  try {\n    const q = query(collection(db, USERS_COLLECTION), where('role', '==', role), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const users = [];\n    querySnapshot.forEach(doc => {\n      var _doc$data$createdAt2;\n      users.push({\n        id: doc.id,\n        ...doc.data(),\n        fechaRegistro: ((_doc$data$createdAt2 = doc.data().createdAt) === null || _doc$data$createdAt2 === void 0 ? void 0 : _doc$data$createdAt2.toDate().toLocaleDateString('es-ES')) || 'N/A'\n      });\n    });\n    return users;\n  } catch (error) {\n    console.error('Error getting users by role:', error);\n    throw new Error(`Error al filtrar usuarios: ${error.message}`);\n  }\n};\n\n// READ - Filtrar usuarios por estado\nexport const getUsersByStatus = async isActive => {\n  try {\n    const q = query(collection(db, USERS_COLLECTION), where('isActive', '==', isActive), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const users = [];\n    querySnapshot.forEach(doc => {\n      var _doc$data$createdAt3;\n      users.push({\n        id: doc.id,\n        ...doc.data(),\n        fechaRegistro: ((_doc$data$createdAt3 = doc.data().createdAt) === null || _doc$data$createdAt3 === void 0 ? void 0 : _doc$data$createdAt3.toDate().toLocaleDateString('es-ES')) || 'N/A'\n      });\n    });\n    return users;\n  } catch (error) {\n    console.error('Error getting users by status:', error);\n    throw new Error(`Error al filtrar usuarios: ${error.message}`);\n  }\n};\n\n// UPDATE - Actualizar usuario\nexport const updateUser = async (userId, userData) => {\n  try {\n    const docRef = doc(db, USERS_COLLECTION, userId);\n\n    // Preparar datos actualizados\n    const updateData = {\n      ...userData,\n      name: userData.nombre && userData.apellido ? `${userData.nombre} ${userData.apellido}` : userData.name,\n      updatedAt: serverTimestamp()\n    };\n    await updateDoc(docRef, updateData);\n\n    // Retornar los datos actualizados\n    return {\n      id: userId,\n      ...updateData,\n      updatedAt: new Date()\n    };\n  } catch (error) {\n    console.error('Error updating user:', error);\n    throw new Error(`Error al actualizar usuario: ${error.message}`);\n  }\n};\n\n// UPDATE - Cambiar estado de usuario (activar/desactivar)\nexport const toggleUserStatus = async (userId, currentStatus) => {\n  try {\n    const docRef = doc(db, USERS_COLLECTION, userId);\n    const newStatus = !currentStatus;\n    await updateDoc(docRef, {\n      isActive: newStatus,\n      updatedAt: serverTimestamp()\n    });\n    return newStatus;\n  } catch (error) {\n    console.error('Error toggling user status:', error);\n    throw new Error(`Error al cambiar estado del usuario: ${error.message}`);\n  }\n};\n\n// UPDATE - Resetear contraseña de usuario\nexport const resetUserPassword = async userId => {\n  try {\n    const docRef = doc(db, USERS_COLLECTION, userId);\n    const newTempPassword = generateTempPassword();\n    await updateDoc(docRef, {\n      tempPassword: newTempPassword,\n      mustChangePassword: true,\n      updatedAt: serverTimestamp()\n    });\n    return newTempPassword;\n  } catch (error) {\n    console.error('Error resetting password:', error);\n    throw new Error(`Error al resetear contraseña: ${error.message}`);\n  }\n};\n\n// DELETE - Eliminar usuario\nexport const deleteUser = async userId => {\n  try {\n    const docRef = doc(db, USERS_COLLECTION, userId);\n    await deleteDoc(docRef);\n    return true;\n  } catch (error) {\n    console.error('Error deleting user:', error);\n    throw new Error(`Error al eliminar usuario: ${error.message}`);\n  }\n};\n\n// STATS - Obtener estadísticas de usuarios\nexport const getUserStats = async () => {\n  try {\n    const querySnapshot = await getDocs(collection(db, USERS_COLLECTION));\n    const stats = {\n      totalUsuarios: 0,\n      docentesActivos: 0,\n      coordinadores: 0,\n      administradores: 0,\n      padres: 0,\n      usuariosActivos: 0,\n      usuariosInactivos: 0\n    };\n    querySnapshot.forEach(doc => {\n      const userData = doc.data();\n      stats.totalUsuarios++;\n\n      // Contar por rol\n      if (userData.role === 'docente') stats.docentesActivos++;else if (userData.role === 'coordinador') stats.coordinadores++;else if (userData.role === 'administrador') stats.administradores++;else if (userData.role === 'padre') stats.padres++;\n\n      // Contar por estado\n      if (userData.isActive) stats.usuariosActivos++;else stats.usuariosInactivos++;\n    });\n    return stats;\n  } catch (error) {\n    console.error('Error getting user stats:', error);\n    throw new Error(`Error al obtener estadísticas: ${error.message}`);\n  }\n};","map":{"version":3,"names":["collection","doc","getDocs","addDoc","updateDoc","deleteDoc","query","orderBy","where","serverTimestamp","getDoc","createUserWithEmailAndPassword","db","auth","USERS_COLLECTION","generateTempPassword","chars","password","i","charAt","Math","floor","random","length","createUser","userData","tempPassword","userCredential","email","uid","user","userDoc","nombre","apellido","name","telefono","role","isActive","mustChangePassword","createdAt","docRef","id","Date","error","console","Error","message","getAllUsers","q","querySnapshot","users","forEach","_doc$data$createdAt","push","data","fechaRegistro","toDate","toLocaleDateString","getUserById","userId","docSnap","exists","getUsersByRole","_doc$data$createdAt2","getUsersByStatus","_doc$data$createdAt3","updateUser","updateData","updatedAt","toggleUserStatus","currentStatus","newStatus","resetUserPassword","newTempPassword","deleteUser","getUserStats","stats","totalUsuarios","docentesActivos","coordinadores","administradores","padres","usuariosActivos","usuariosInactivos"],"sources":["C:/Users/Daniel Torres/Documents/GitHub/QuickReserve/client/src/services/usersService.js"],"sourcesContent":["// src/services/usersService.js\r\nimport { \r\n  collection, \r\n  doc, \r\n  getDocs, \r\n  addDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  query, \r\n  orderBy,\r\n  where,\r\n  serverTimestamp,\r\n  getDoc\r\n} from 'firebase/firestore';\r\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\r\nimport { db, auth } from '../firebase/firebaseConfig';\r\n\r\n// Colección de usuarios en Firestore\r\nconst USERS_COLLECTION = 'users';\r\n\r\n// Generar contraseña temporal aleatoria\r\nconst generateTempPassword = () => {\r\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  let password = '';\r\n  for (let i = 0; i < 8; i++) {\r\n    password += chars.charAt(Math.floor(Math.random() * chars.length));\r\n  }\r\n  return password;\r\n};\r\n\r\n// CREATE - Crear nuevo usuario\r\nexport const createUser = async (userData) => {\r\n  try {\r\n    const tempPassword = generateTempPassword();\r\n    \r\n    // Crear usuario en Firebase Auth\r\n    const userCredential = await createUserWithEmailAndPassword(auth, userData.email, tempPassword);\r\n    const uid = userCredential.user.uid;\r\n    \r\n    // Preparar datos del usuario para Firestore\r\n    const userDoc = {\r\n      uid,\r\n      nombre: userData.nombre,\r\n      apellido: userData.apellido,\r\n      name: `${userData.nombre} ${userData.apellido}`, // Nombre completo\r\n      email: userData.email,\r\n      telefono: userData.telefono,\r\n      role: userData.role,\r\n      isActive: true,\r\n      mustChangePassword: true,\r\n      tempPassword: tempPassword,\r\n      createdAt: serverTimestamp()\r\n    };\r\n    \r\n    // Guardar en Firestore\r\n    const docRef = await addDoc(collection(db, USERS_COLLECTION), userDoc);\r\n    \r\n    // Retornar el usuario creado con su ID\r\n    return {\r\n      id: docRef.id,\r\n      ...userDoc,\r\n      createdAt: new Date() // Para mostrar inmediatamente\r\n    };\r\n  } catch (error) {\r\n    console.error('Error creating user:', error);\r\n    throw new Error(`Error al crear usuario: ${error.message}`);\r\n  }\r\n};\r\n\r\n// READ - Obtener todos los usuarios\r\nexport const getAllUsers = async () => {\r\n  try {\r\n    const q = query(collection(db, USERS_COLLECTION), orderBy('createdAt', 'desc'));\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const users = [];\r\n    querySnapshot.forEach((doc) => {\r\n      users.push({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n        // Convertir timestamp a fecha legible\r\n        fechaRegistro: doc.data().createdAt?.toDate().toLocaleDateString('es-ES') || 'N/A'\r\n      });\r\n    });\r\n    \r\n    return users;\r\n  } catch (error) {\r\n    console.error('Error getting users:', error);\r\n    throw new Error(`Error al obtener usuarios: ${error.message}`);\r\n  }\r\n};\r\n\r\n// READ - Obtener usuario por ID\r\nexport const getUserById = async (userId) => {\r\n  try {\r\n    const docRef = doc(db, USERS_COLLECTION, userId);\r\n    const docSnap = await getDoc(docRef);\r\n    \r\n    if (docSnap.exists()) {\r\n      return {\r\n        id: docSnap.id,\r\n        ...docSnap.data()\r\n      };\r\n    } else {\r\n      throw new Error('Usuario no encontrado');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error getting user:', error);\r\n    throw new Error(`Error al obtener usuario: ${error.message}`);\r\n  }\r\n};\r\n\r\n// READ - Filtrar usuarios por rol\r\nexport const getUsersByRole = async (role) => {\r\n  try {\r\n    const q = query(\r\n      collection(db, USERS_COLLECTION), \r\n      where('role', '==', role),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const users = [];\r\n    querySnapshot.forEach((doc) => {\r\n      users.push({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n        fechaRegistro: doc.data().createdAt?.toDate().toLocaleDateString('es-ES') || 'N/A'\r\n      });\r\n    });\r\n    \r\n    return users;\r\n  } catch (error) {\r\n    console.error('Error getting users by role:', error);\r\n    throw new Error(`Error al filtrar usuarios: ${error.message}`);\r\n  }\r\n};\r\n\r\n// READ - Filtrar usuarios por estado\r\nexport const getUsersByStatus = async (isActive) => {\r\n  try {\r\n    const q = query(\r\n      collection(db, USERS_COLLECTION), \r\n      where('isActive', '==', isActive),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const users = [];\r\n    querySnapshot.forEach((doc) => {\r\n      users.push({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n        fechaRegistro: doc.data().createdAt?.toDate().toLocaleDateString('es-ES') || 'N/A'\r\n      });\r\n    });\r\n    \r\n    return users;\r\n  } catch (error) {\r\n    console.error('Error getting users by status:', error);\r\n    throw new Error(`Error al filtrar usuarios: ${error.message}`);\r\n  }\r\n};\r\n\r\n// UPDATE - Actualizar usuario\r\nexport const updateUser = async (userId, userData) => {\r\n  try {\r\n    const docRef = doc(db, USERS_COLLECTION, userId);\r\n    \r\n    // Preparar datos actualizados\r\n    const updateData = {\r\n      ...userData,\r\n      name: userData.nombre && userData.apellido ? `${userData.nombre} ${userData.apellido}` : userData.name,\r\n      updatedAt: serverTimestamp()\r\n    };\r\n    \r\n    await updateDoc(docRef, updateData);\r\n    \r\n    // Retornar los datos actualizados\r\n    return {\r\n      id: userId,\r\n      ...updateData,\r\n      updatedAt: new Date()\r\n    };\r\n  } catch (error) {\r\n    console.error('Error updating user:', error);\r\n    throw new Error(`Error al actualizar usuario: ${error.message}`);\r\n  }\r\n};\r\n\r\n// UPDATE - Cambiar estado de usuario (activar/desactivar)\r\nexport const toggleUserStatus = async (userId, currentStatus) => {\r\n  try {\r\n    const docRef = doc(db, USERS_COLLECTION, userId);\r\n    const newStatus = !currentStatus;\r\n    \r\n    await updateDoc(docRef, {\r\n      isActive: newStatus,\r\n      updatedAt: serverTimestamp()\r\n    });\r\n    \r\n    return newStatus;\r\n  } catch (error) {\r\n    console.error('Error toggling user status:', error);\r\n    throw new Error(`Error al cambiar estado del usuario: ${error.message}`);\r\n  }\r\n};\r\n\r\n// UPDATE - Resetear contraseña de usuario\r\nexport const resetUserPassword = async (userId) => {\r\n  try {\r\n    const docRef = doc(db, USERS_COLLECTION, userId);\r\n    const newTempPassword = generateTempPassword();\r\n    \r\n    await updateDoc(docRef, {\r\n      tempPassword: newTempPassword,\r\n      mustChangePassword: true,\r\n      updatedAt: serverTimestamp()\r\n    });\r\n    \r\n    return newTempPassword;\r\n  } catch (error) {\r\n    console.error('Error resetting password:', error);\r\n    throw new Error(`Error al resetear contraseña: ${error.message}`);\r\n  }\r\n};\r\n\r\n// DELETE - Eliminar usuario\r\nexport const deleteUser = async (userId) => {\r\n  try {\r\n    const docRef = doc(db, USERS_COLLECTION, userId);\r\n    await deleteDoc(docRef);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting user:', error);\r\n    throw new Error(`Error al eliminar usuario: ${error.message}`);\r\n  }\r\n};\r\n\r\n// STATS - Obtener estadísticas de usuarios\r\nexport const getUserStats = async () => {\r\n  try {\r\n    const querySnapshot = await getDocs(collection(db, USERS_COLLECTION));\r\n    \r\n    const stats = {\r\n      totalUsuarios: 0,\r\n      docentesActivos: 0,\r\n      coordinadores: 0,\r\n      administradores: 0,\r\n      padres: 0,\r\n      usuariosActivos: 0,\r\n      usuariosInactivos: 0\r\n    };\r\n    \r\n    querySnapshot.forEach((doc) => {\r\n      const userData = doc.data();\r\n      stats.totalUsuarios++;\r\n      \r\n      // Contar por rol\r\n      if (userData.role === 'docente') stats.docentesActivos++;\r\n      else if (userData.role === 'coordinador') stats.coordinadores++;\r\n      else if (userData.role === 'administrador') stats.administradores++;\r\n      else if (userData.role === 'padre') stats.padres++;\r\n      \r\n      // Contar por estado\r\n      if (userData.isActive) stats.usuariosActivos++;\r\n      else stats.usuariosInactivos++;\r\n    });\r\n    \r\n    return stats;\r\n  } catch (error) {\r\n    console.error('Error getting user stats:', error);\r\n    throw new Error(`Error al obtener estadísticas: ${error.message}`);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}